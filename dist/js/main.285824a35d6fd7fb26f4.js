/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./js/selectors.js
var selectors = {
  $hexToRgbBtn: document.querySelector(".hextorgb__btn"),
  $rgbToHexBtn: document.querySelector(".rgbtohex__btn"),
  $hexToRgbCard: document.querySelector(".hextorgb__card"),
  $rgbToHexCard: document.querySelector(".rgbtohex__card"),
  $hexInputField: document.querySelector(".hex__input--field"),
  $rgbInputField: document.querySelector(".rgb__input--field"),
  $firstColorWindow: document.querySelector(".card:first-of-type .card__color--window"),
  $lastColorWindow: document.querySelector(".card:last-of-type .card__color--window"),
  $copyBtns: document.querySelectorAll(".btn .bxs-copy"),
  $hexColorLabel: document.querySelector(".hex__value span"),
  $rgbColorLabel: document.querySelector(".rgb__value span"),
  $firstHslColorLabel: document.querySelector(".hextorgb__card .hsl__value span"),
  $lastHslColorLabel: document.querySelector(".rgbtohex__card .hsl__value span")
};
;// CONCATENATED MODULE: ./js/functions.js
// Function for converting hex into rgb
var hexToRgb = function hexToRgb(hex) {
  if (hex.length === 4) {
    return hex.slice(1).split("").map(function (e) {
      return parseInt(e, 16);
    });
  } else if (hex.length === 7) {
    return hex.slice(1).match(/[\da-f]{2}/gi).map(function (e) {
      return parseInt(e, 16);
    });
  }
}; // Function for converting rgb into hex

var rgbToHex = function rgbToHex(rgb) {
  var rgbValues = rgb.slice(4).slice(0, -1).trim().split(/,\s{0,}/).filter(function (e) {
    return e <= 255;
  });
  return rgbValues.length === 3 ? "#" + rgbValues.map(function (e) {
    return (+e).toString(16).length < 2 ? "0" + (+e).toString(16) : (+e).toString(16);
  }).join("") : null;
}; // Function for converting rgb into hsl

var rgbToHsl = function rgbToHsl(rgbArr) {
  console.log(rgbArr);
};
;// CONCATENATED MODULE: ./js/main.js
var _sel$$hexInputField, _sel$$rgbInputField;




var hexRegex = /^#([\da-f]{3}|[\da-f]{6})$/i,
    rgbRegex = /^(rgb)\((\d{1,3}\s{0,},\s{0,}){2}\d{1,3}\s{0,}\)$/i;
/*----------- Event handler for card switch buttons -----------*/

selectors.$hexToRgbBtn.addEventListener("click", function () {
  // Toggle class in buttons
  if (!this.classList.contains("btn__active")) this.classList.add("btn__active");
  selectors.$rgbToHexBtn.classList.remove("btn__active"); // Toggle class in cards

  if (!selectors.$hexToRgbCard.matches(".card-visible")) selectors.$hexToRgbCard.classList.add("card-visible");
  selectors.$rgbToHexCard.classList.remove("card-visible");
});
selectors.$rgbToHexBtn.addEventListener("click", function () {
  // Toggle class in buttons
  this.classList.toggle("btn__active");
  selectors.$hexToRgbBtn.classList.toggle("btn__active"); // Toggle class in cards

  selectors.$rgbToHexCard.classList.add("card-visible");
  selectors.$hexToRgbCard.classList.remove("card-visible");
});
/*--------------- Event handler for copy buttons --------------*/

try {
  selectors.$copyBtns.forEach(function (cpBtn) {
    cpBtn.addEventListener("click", function () {
      navigator.clipboard.writeText(this.parentElement.previousElementSibling.textContent).then(function () {
        return alert("color value has been copied");
      });
    });
  });
} catch (error) {
  selectors.$copyBtns.forEach(function (cpBtn) {
    return cpBtn.style.display = "none";
  });
}
/*-------------- Event Handler for hex input field --------------*/


(_sel$$hexInputField = selectors.$hexInputField) === null || _sel$$hexInputField === void 0 ? void 0 : _sel$$hexInputField.addEventListener("input", function () {
  if (hexRegex.test(this.value.trim())) {
    // Calculate rgb & hsl values
    var rgbData = hexToRgb(this.value.trim());
    var hslData = rgbToHsl(rgbData); // Display rgb & hex values in UI

    var rgbColorValue = "rgb(".concat(rgbData[0], ", ").concat(rgbData[1], ", ").concat(rgbData[2], ")");
    selectors.$rgbColorLabel.textContent = rgbColorValue; // Display calculated color in color window

    selectors.$firstColorWindow.style.backgroundColor = rgbColorValue;
  }
});
/*--------------- Event Handler for rgb input field ---------------*/

(_sel$$rgbInputField = selectors.$rgbInputField) === null || _sel$$rgbInputField === void 0 ? void 0 : _sel$$rgbInputField.addEventListener("input", function () {
  if (rgbRegex.test(this.value.trim())) {
    // Calculate hex & hsl values
    var hexColor = rgbToHex(this.value.trim());

    if (hexColor) {
      var hslData = rgbToHsl(hexToRgb(hexColor)); // Display hex & hsl values in UI

      selectors.$hexColorLabel.textContent = hexColor; // Display calcualted color value in color window

      selectors.$lastColorWindow.style.backgroundColor = hexColor;
    }
  }
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,