{"version":3,"file":"index-legacy.e1b6672d.js","sources":["../../src/js/selectors.js","../../src/js/functions.js","../../src/js/main.js"],"sourcesContent":["export const selectors = {\n  $hexToRgbBtn: document.querySelector(\".hextorgb__btn\"),\n  $rgbToHexBtn: document.querySelector(\".rgbtohex__btn\"),\n  $hexToRgbCard: document.querySelector(\".hextorgb__card\"),\n  $rgbToHexCard: document.querySelector(\".rgbtohex__card\"),\n  $hexInputField: document.querySelector(\".hex__input--field\"),\n  $rgbInputField: document.querySelector(\".rgb__input--field\"),\n  $firstColorWindow: document.querySelector(\n    \".card:first-of-type .card__color--window\"\n  ),\n  $lastColorWindow: document.querySelector(\n    \".card:last-of-type .card__color--window\"\n  ),\n  $copyBtns: document.querySelectorAll(\".btn .bxs-copy\"),\n  $hexColorLabel: document.querySelector(\".hex__value span\"),\n  $rgbColorLabel: document.querySelector(\".rgb__value span\"),\n  $firstHslColorLabel: document.querySelector(\n    \".hextorgb__card .hsl__value span\"\n  ),\n  $lastHslColorLabel: document.querySelector(\".rgbtohex__card .hsl__value span\")\n};\n","/**\n * Converts HEX color value to RGB\n * returns an array of red, green & blue\n *\n * @param  {string} hex - Hex color value\n * @return {Array}      - red,green & blue values\n */\nexport const hexToRgb = hex => {\n  if (hex.length === 4) {\n    return hex\n      .slice(1)\n      .split(\"\")\n      .map(e => parseInt(e, 16));\n  } else if (hex.length === 7) {\n    return hex\n      .slice(1)\n      .match(/[\\da-f]{2}/gi)\n      .map(e => parseInt(e, 16));\n  }\n};\n\n/**\n * Convert RGB color value to HEX\n * returns a string of hex color value\n *\n * @param  {Array} [r,g,b] - red, green & blue values\n * @return {string}        - Hex color value\n */\nexport const rgbToHex = rgb => {\n  const rgbValues = rgb\n    .slice(4)\n    .slice(0, -1)\n    .trim()\n    .split(/,\\s{0,}/)\n    .filter(e => e <= 255);\n\n  return rgbValues.length === 3\n    ? `#${rgbValues\n        .map(e =>\n          (+e).toString(16).length < 2\n            ? `0${(+e).toString(16)}`\n            : (+e).toString(16)\n        )\n        .join(\"\")}`\n    : null;\n};\n\n/**\n * Converts RGB color value into HSL.\n * returns an array containing hue,saturation & lightness\n *\n * @param  {Array} [r,g,b] - red, green & blue values\n * @return {Array}         - hue, stauration & lightness values\n */\nexport const rgbToHsl = (...rgbArr) => {\n  let h, s;\n\n  // Calculate fraction of r,g,b\n  const rgb = rgbArr.map(val => val / 255);\n  const [r, g, b] = rgb;\n\n  // Calculate lightness\n  const [min, max] = [Math.min(...rgb), Math.max(...rgb)];\n  const l = (min + max) / 2;\n\n  // Calculate hue & saturation\n  const delta = max - min;\n  if (delta === 0) h = s = 0;\n  else {\n    s = l > 0.5 ? delta / (2 - l * 2) : delta / (l * 2);\n\n    switch (max) {\n      case r:\n        h = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / delta + 2;\n        break;\n      case b:\n        h = (r - g) / delta + 4;\n        break;\n    }\n    h = Math.round(h * 60);\n  }\n\n  return [h, +(s * 100).toFixed(0), +(l * 100).toFixed(0)];\n};\n\n/**\n * TODO: Function for conversion of HSL color value to RGB\n */\n","import \"../scss/main.scss\";\nimport { selectors as sel } from \"./selectors\";\nimport { rgbToHex, hexToRgb, rgbToHsl } from \"./functions\";\n\nconst [hexRegex, rgbRegex] = [\n  /^#([\\da-f]{3}|[\\da-f]{6})$/i,\n  /^(rgb)\\(\\s{0,}(\\d{1,3}\\s{0,},\\s{0,}){2}\\d{1,3}\\s{0,}\\)$/i\n];\n\n/* ----------- Event handler for card switch buttons -----------*/\nsel.$hexToRgbBtn.addEventListener(\"click\", function () {\n  // Toggle class in buttons\n  if (!this.classList.contains(\"btn__active\"))\n    this.classList.add(\"btn__active\");\n  sel.$rgbToHexBtn.classList.remove(\"btn__active\");\n\n  // Toggle class in cards\n  if (!sel.$hexToRgbCard.matches(\".card-visible\"))\n    sel.$hexToRgbCard.classList.add(\"card-visible\");\n  sel.$rgbToHexCard.classList.remove(\"card-visible\");\n});\n\nsel.$rgbToHexBtn.addEventListener(\"click\", function () {\n  // Toggle class in buttons\n  this.classList.toggle(\"btn__active\");\n  sel.$hexToRgbBtn.classList.toggle(\"btn__active\");\n\n  // Toggle class in cards\n  sel.$rgbToHexCard.classList.add(\"card-visible\");\n  sel.$hexToRgbCard.classList.remove(\"card-visible\");\n});\n\n/* --------------- Event handler for copy buttons --------------*/\ntry {\n  sel.$copyBtns.forEach(cpBtn => {\n    cpBtn.addEventListener(\"click\", function () {\n      navigator.clipboard\n        .writeText(this.parentElement.previousElementSibling.textContent)\n        .then(() => alert(\"color value has been copied\"));\n    });\n  });\n} catch (error) {\n  sel.$copyBtns.forEach(cpBtn => (cpBtn.style.display = \"none\"));\n}\n\n/* -------------- Event Handler for hex input field --------------*/\nsel.$hexInputField?.addEventListener(\"input\", function () {\n  if (hexRegex.test(this.value.trim())) {\n    // Calculate rgb & hsl values\n    const [r, g, b] = hexToRgb(this.value.trim());\n    const [h, s, l] = rgbToHsl(r, g, b);\n\n    // Display rgb & hex values in UI\n    const rgbColorValue = `rgb(${r}, ${g}, ${b})`;\n    sel.$rgbColorLabel.textContent = rgbColorValue;\n    sel.$firstHslColorLabel.textContent = `hsl(${h}, ${s}%, ${l}%)`;\n\n    // Display calculated color in color window\n    sel.$firstColorWindow.style.backgroundColor = rgbColorValue;\n  }\n});\n\n/* --------------- Event Handler for rgb input field ---------------*/\nsel.$rgbInputField?.addEventListener(\"input\", function () {\n  if (rgbRegex.test(this.value.trim())) {\n    // Calculate hex & hsl values\n    const hexColor = rgbToHex(this.value.trim());\n    if (hexColor) {\n      const [h, s, l] = rgbToHsl(...hexToRgb(hexColor));\n\n      // Display hex & hsl values in UI\n      sel.$hexColorLabel.textContent = hexColor;\n      sel.$lastHslColorLabel.textContent = `hsl(${h}, ${s}%, ${l}%)`;\n\n      // Display calcualted color value in color window\n      sel.$lastColorWindow.style.backgroundColor = hexColor;\n    }\n  }\n});\n"],"names":["selectors","$hexToRgbBtn","document","querySelector","$rgbToHexBtn","$hexToRgbCard","$rgbToHexCard","$hexInputField","$rgbInputField","$firstColorWindow","$lastColorWindow","$copyBtns","querySelectorAll","$hexColorLabel","$rgbColorLabel","$firstHslColorLabel","$lastHslColorLabel","hexToRgb","hex","length","slice","split","map","e","parseInt","match","rgbToHsl","rgbArr","h","s","rgb","val","r","g","b","min","max","Math","l","delta","round","toFixed","hexRegex","rgbRegex","sel","addEventListener","this","classList","contains","add","remove","matches","toggle","forEach","cpBtn","navigator","clipboard","writeText","parentElement","previousElementSibling","textContent","then","alert","error","style","display","test","value","trim","rgbColorValue","backgroundColor","hexColor","filter","rgbValues","toString","join","rgbToHex"],"mappings":"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"}